package core;

/**
 * Represents a discrete event in the simulation.
 * <p>
 * Events are processed chronologically by the Simulator through
 * the EventQueue. Each event is generated by a TrafficSource
 * and determines when it switches state (ON or OFF).
 */
public class Event implements Comparable<Event> {

    // The simulation time (in seconds) when this event occurs.
    private final double time;

    /** Unique identifier of the source generating this event. */
    private final int sourceId;

    /** The type of event (ON or OFF). */
    private final EventType type;

    /**
     * Constructs a new Event.
     *
     * @param time     the simulation time when the event occurs
     * @param sourceId the ID of the traffic source
     * @param type     the type of event (ON/OFF)
     */
    public Event(double time, int sourceId, EventType type) {
        this.time = time;
        this.sourceId = sourceId;
        this.type = type;
    }

    // @return the simulation time of the event
    public double getTime() {
        return time;
    }

    /* @return the ID of the traffic source associated with this event */
    public int getSourceId() {
        return sourceId;
    }

    /** @return the type of event (ON/OFF) */
    public EventType getType() {
        return type;
    }

    /**
     * Compares this event to another based on simulation time.
     * <p>
     * This allows events to be ordered in the priority queue
     * so that the earliest event is always processed first.
     *
     * @param other the event to compare against
     * @return a negative value if this event is earlier, positive if later, 0 if equal
     */
    @Override
    public int compareTo(Event other) {
        return Double.compare(this.time, other.time);
    }

    /**
     * Returns a readable string representation of the event,
     * useful for debugging or logging simulation progress.
     */
    @Override
    public String toString() {
        return String.format("[t=%.3f] Source %d -> %s", time, sourceId, type);
    }
}
